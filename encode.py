#!/usr/bin/env python3
"""
encode.py
Lee una instancia ASCII del puzzle de term√≥metros y genera domain.lp con hechos.
*** Usa coordenadas 0..N-1 en formato (row, col) para ser compatible con decode.py ***
"""
import sys

if len(sys.argv) != 3:
    print("Uso: python3 encode.py entrada.txt domain.lp")
    sys.exit(1)

infile = sys.argv[1]
outfile = sys.argv[2]

# Mapas de caracteres
bulb_map = {'U': 'up', 'D': 'down', 'L': 'left', 'R': 'right'}
seg_map = {'^': 'up', 'v': 'down', '<': 'left', '>': 'right'}

with open(infile, 'r', encoding='utf-8') as f:
    lines = [line.rstrip('\n') for line in f.readlines()]

if len(lines) < 3:
    print("Entrada inv√°lida: muy pocas l√≠neas.")
    sys.exit(1)

# √öltimas dos l√≠neas: primera ‚Üí columnas, segunda ‚Üí filas
col_line = lines[-2].strip()
row_line = lines[-1].strip()
grid_lines = lines[:-2]
n = len(grid_lines)

# Verificar cuadrado
for i, row in enumerate(grid_lines, start=1):
    if len(row) != n:
        print(f"Fila {i} tiene longitud {len(row)} distinta de n={n}.")
        sys.exit(1)

# Parsear contadores
try:
    col_counts = [int(x) for x in col_line.split()]
    row_counts = [int(x) for x in row_line.split()]
except ValueError:
    print("Los contadores de filas/columnas deben ser enteros separados por espacios.")
    sys.exit(1)

if len(col_counts) != n or len(row_counts) != n:
    print("N√∫mero de contadores distinto de n.")
    sys.exit(1)

with open(outfile, 'w', encoding='utf-8') as out:
    out.write(f"% Generated by encode.py from {infile}\n")
    out.write(f"dim({n}).\n\n")

    # üîπ Coordenadas 0..n-1 en formato (row, col)
    for row, line in enumerate(grid_lines):
        for col, ch in enumerate(line):
            if ch in bulb_map:
                out.write(f"bulb({row},{col},{bulb_map[ch]}).\n")
            elif ch in seg_map:
                out.write(f"seg({row},{col},{seg_map[ch]}).\n")
            else:
                print(f"Caracter desconocido '{ch}' en ({row},{col}).")
                sys.exit(1)
    out.write("\n")

    # Contadores por columna
    for i, num in enumerate(col_counts):
        out.write(f"colCount({i},{num}).\n")
    out.write("\n")

    # Contadores por fila
    for i, num in enumerate(row_counts):
        out.write(f"rowCount({i},{num}).\n")

print(f"Wrote domain facts to {outfile}")
